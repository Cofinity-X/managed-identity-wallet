# /********************************************************************************
# * Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Apache License, Version 2.0 which is available at
# * https://www.apache.org/licenses/LICENSE-2.0.
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# * License for the specific language governing permissions and limitations
# * under the License.
# *
# * SPDX-License-Identifier: Apache-2.0
# ********************************************************************************/

## @section MIW Common parameters
##

## @param replicaCount The amount of replicas to run
##
replicaCount: 1

## @param nameOverride String to partially override common.names.fullname template (will maintain the release name)
## @param fullnameOverride String to fully override common.names.fullname template
##
nameOverride: ""
fullnameOverride: ""

## Managed Identity Wallets image version
## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
## @param image.repository MIW image repository
## @param image.pullPolicy MIW image pull policy
## @param image.tag MIW image tag (empty one will use "appVersion" value from chart definition)
##
image:
  repository: tractusx/managed-identity-wallet
  pullPolicy: Always
  tag: ""


## @param secrets Parameters for the application (will be stored as secrets - so, for passwords, ...)
##
secrets: { }

## @param envs Parameters for the application (will be provided as environment variables)
##
envs: { }

## @param serviceAccount.create Enable creation of ServiceAccount
## @param serviceAccount.annotations Annotations to add to the ServiceAccount
## @param serviceAccount.name The name of the ServiceAccount to use.
##
serviceAccount:
  create: true
  annotations: { }
  name: ""

## @section Managed Identity Wallet Common Parameters
##

## @param service.type Kubernetes Service type
## @param service.port Kubernetes Service port
##
service:
  type: ClusterIP
  port: 8080

## @param ingress.enabled Enable ingress controller resource
## @param ingress.annotations Ingress annotations
## @param ingress.hosts Ingress accepted hostnames
## @param ingress.tls Ingress TLS configuration
##
ingress:
  enabled: false
  annotations: { }
  hosts: [ ]
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## @param podSecurityContext Pod Security Context
##
podSecurityContext: { }

## @param jobSecurityContext.runAsUser User ID used to run the job
## @param jobSecurityContext.runAsGroup Group ID used to run the job
## @param jobSecurityContext.runAsNonRoot Run the job as a non-root user
##
jobSecurityContext:
  runAsUser: 1001
  runAsGroup: 0
  runAsNonRoot: true

## @param securityContext.privileged Enable privileged container
## @param securityContext.allowPrivilegeEscalation Allow privilege escalation
## @param securityContext.runAsUser User ID used to run the container
## @param securityContext.runAsGroup Group ID used to run the container
## @param securityContext.runAsNonRoot Run the container as a non-root user
##
securityContext:
  privileged: false
  allowPrivilegeEscalation: false
  runAsUser: 1001
  runAsGroup: 0
  runAsNonRoot: true

## @param resources.requests.cpu CPU resource requests
## @param resources.requests.memory Memory resource requests
## @param resources.limits.cpu CPU resource limits
## @param resources.limits.memory Memory resource limits
##
resources:
  requests:
    cpu: 250m
    memory: 500Mi
  limits:
    cpu: 2
    memory: 1Gi

## @param nodeSelector [object] [node selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) to constrain pods to nodes
##
nodeSelector: { }

## @param tolerations Tolerations for pod assignment
##
tolerations: [ ]

## @param affinity Affinity for pod assignment
##
affinity: { }

## @param podAnnotations Pod annotations
##
podAnnotations: { }

## @section Managed Identity Wallets Primary Parameters
##
miw:
  ## @param miw.host Host name. Default: <release name>-managed-identity-wallet:<port>
  ## @param miw.environment Runtime environment. Should be ether local, dev, int or prod
  ## @param miw.jobs.createDatabaseIfNotExists Enable to create the database if it does not exist
  ## @param miw.ssi.enforceHttpsInDidWebResolution Enable to use HTTPS in DID Web Resolution
  ## @param miw.ssi.vcExpiryDate Verifiable Credential expiry date. Format 'dd-MM-yyyy'. If empty it is set to 31-12-<current year>
  ## @param miw.authorityWallet.bpn Authority Wallet BPN
  ## @param miw.logging.level Log level. Should be ether ERROR, WARN, INFO, DEBUG, or TRACE.
  ##
  host: "{{ .Release.Name }}-managed-identity-wallet:8080"
  environment: "dev"
  jobs:
    createDatabaseIfNotExists: true
  ssi:
    enforceHttpsInDidWebResolution: false
    vcExpiryDate: ""
  authorityWallet:
    bpn: "BPNL000000000000"
  logging:
    level: "INFO"
  ## @param miw.database.useSSL Set to true to enable SSL connection to the database
  ## @param miw.database.port Database port
  ## @param miw.database.host Database host. Default: <release name>-postgresql
  ## @param miw.database.user Database user
  ## @param miw.database.name Database name
  ## @param miw.database.secret Existing secret name for the database password. Default: <release name>-postgresql
  ## @param miw.database.secretPasswordKey Existing secret key for the database password
  ## @param miw.database.encryptionKey.value Database encryption key for confidential data.  Ignored if `secret` is set. If empty a secret with 32 random alphanumeric chars is generated.
  ## @param miw.database.encryptionKey.secret Existing secret for database encryption key
  ## @param miw.database.encryptionKey.secretKey Existing secret key for database encryption key
  ##
  database:
    useSSL: false
    port: 5432
    host: "{{ .Release.Name }}-postgresql"
    user: "miw"
    name: "miw_app"
    secret: "{{ .Release.Name }}-postgresql"
    secretPasswordKey: "password"
    encryptionKey:
      value: ""
      secret: ""
      secretKey: ""
  ## @param miw.keycloak.realm Keycloak realm
  ## @param miw.keycloak.clientId Keycloak client id
  ## @param miw.keycloak.url Keycloak URL. Default: http://<release name>-keycloak
  keycloak:
    realm: "miw_test"
    clientId: "miw_private_client"
    url: "http://{{ .Release.Name }}-keycloak"

## @section Keycloak Parameters (for more parameters see https://github.com/bitnami/charts/tree/main/bitnami/keycloak)
##

keycloak:
  ## @param keycloak.enabled Enable to deploy Keycloak
  ## @param keycloak.jobs.createDatabaseIfNotExists Enable to create keycloak database if not exists
  ## @param  keycloak.extraEnvVars[0].name KEYCLOAK_HOSTNAME
  ## @param  keycloak.extraEnvVars[0].value {{ .Release.Name }}-keycloak
  ##
  enabled: true
  jobs:
    createDatabaseIfNotExists: true
  extraEnvVars:
    - name: KEYCLOAK_HOSTNAME
      value: "{{ .Release.Name }}-keycloak"
  ## @param keycloak.postgresql.enabled Enable to deploy PostgreSQL
  ## @param keycloak.externalDatabase.host Database host. Default: <release name>-postgresql
  ## @param keycloak.externalDatabase.port Database port
  ## @param keycloak.externalDatabase.user Database user
  ## @param keycloak.externalDatabase.database Database name
  ## @param keycloak.externalDatabase.existingSecret Existing secret name for the database password. Default: <release name>-postgresql
  ## @param keycloak.externalDatabase.existingSecretPasswordKey Existing secret key for the database password
  ##
  postgresql:
    enabled: false
  externalDatabase:
    host: "{{ .Release.Name }}-postgresql"
    port: 5432
    user: "miw"
    database: "miw_keycloak"
    existingSecret: "{{ .Release.Name }}-postgresql"
    existingSecretPasswordKey: "password"
  ## @param keycloak.auth.adminUser Keycloak admin user
  ## @param keycloak.auth.adminPassword Keycloak admin password
  ##
  auth:
    adminUser: "admin"
    adminPassword: ""
  ## @param keycloak.keycloakConfigCli.enabled Enable to create the miw playground realm
  ## @param keycloak.keycloakConfigCli.existingConfigmap Existing configmap name for the realm configuration
  ## @param keycloak.keycloakConfigCli.backoffLimit Number of retries before considering a Job as failed
  ##
  keycloakConfigCli:
    enabled: true
    existingConfigmap: keycloak-realm-config
    backoffLimit: 2

## @section Postgresql Parameters (for more parameters see https://github.com/bitnami/charts/tree/main/bitnami/postgresql)
##
postgresql:
  ## @param postgresql.enabled Enable to deploy Postgresql
  ##
  enabled: true
  ## @param postgresql.auth.enablePostgresUser Enable to create the postgresql admin user
  ## @param postgresql.auth.username Postgresql user to create
  ## @param postgresql.auth.password Postgresql password to set (if empty one is generated)
  ##
  auth:
    enablePostgresUser: false
    username: "miw"
    password: ""
  ## @param postgresql.backup.enabled Enable to create a backup cronjob
  ## @param postgresql.backup.conjob.schedule Backup schedule
  ## @param postgresql.backup.conjob.storage.existingClaim Name of an existing PVC to use
  ## @param postgresql.backup.conjob.storage.resourcePolicy Set resource policy to "keep" to avoid removing PVCs during a helm delete operation
  ## @param postgresql.backup.conjob.storage.size PVC Storage Request for the backup data volume
  ##
  backup:
    enabled: false
    conjob:
      schedule: "* */6 * * *"
      storage:
        existingClaim: ""
        resourcePolicy: "keep"
        size: "8Gi"
