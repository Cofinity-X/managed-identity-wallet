# /********************************************************************************
# * Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Apache License, Version 2.0 which is available at
# * https://www.apache.org/licenses/LICENSE-2.0.
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# * License for the specific language governing permissions and limitations
# * under the License.
# *
# * SPDX-License-Identifier: Apache-2.0
# ********************************************************************************/

# -- The amount of replicas to run
replicaCount: 1

# -- Image of the main container
image:
  # -- Image repository
  # TODO change back to tractusx/managed-identity-wallet
  repository: ghcr.io/catenax-ng/tx-managed-identity-wallet_miw_service
  # -- PullPolicy
  pullPolicy: Always
  # -- Image tag (empty one will use "appVersion" value from chart definition)
  # TODO remove latest again
  tag: "latest"

nameOverride: ""
fullnameOverride: ""

# -- Parameters for the application (will be stored as secrets - so, for passwords, ...)
secrets: { }
# TODO write encryption key to secret always
#  ENCRYPTION_KEY: xxx  # 64 chars

# -- Parameters for the application (will be provided as plain environment variables)
envs: { }

# -- Parameters for the application (will be provided as plain environment variables)
miw:
  # -- MIW host name. Default: <release name>-managed-identity-wallet:<port>
  host: "{{ .Release.Name }}-managed-identity-wallet:8080"
  # -- Runtime environment. Should be ether local, dev, int or prod
  environment: "dev"
  # -- Job configuration
  jobs:
    # -- Enable to create the database if it does not exist
    createDatabaseIfNotExists: true
  ssi:
    # -- Enable to use HTTPS in DID Web Resolution
    enforceHttpsInDidWebResolution: false
    # -- Verifiable Credential expiry date. Format 'dd-MM-yyyy'. If empty it is set to 31-12-<current year>
    vcExpiryDate: ""
  # -- Authority Wallet
  authorityWallet:
    # -- Authority Wallet BPN
    bpn: "BPNL000000000000"
  # -- Database
  database:
    # -- Set to true to enable SSL connection to the database
    useSSL: false
    # -- Database port
    port: 5432
    # -- Database host. Default: <release name>-postgresql
    host: "{{ .Release.Name }}-postgresql"
    # -- Database user. Default: miw
    user: "miw"
    # -- Existing secret name for the database password. Default: <release name>-postgresql
    secret: "{{ .Release.Name }}-postgresql"
    # -- Existing secret key for the database password
    secretPasswordKey: "password"
    # -- Database name. Default: miw_app
    name: "miw_app"
    # -- Database encryption key for confidential data. If empty it is set to 32 random alphanumeric chars
    encryptionKey: ""
  keycloak:
    # -- Keycloak realm
    realm: "miw_test"
    # -- Keycloak client id
    clientId: "miw_private_client"
    # -- Keycloak URL. Default: <release name>-keycloak:4200
    url: "http://{{ .Release.Name }}-keycloak:4200"
  logging:
    # -- Log Level. Should be ether ERROR, WARN, INFO, DEBUG, or TRACE. Default: INFO
    level: "INFO"


# -- ServiceAccount configuration
serviceAccount:
  create: true
  annotations: { }
  name: ""

# -- Service configuration
service:
  type: ClusterIP
  port: 8080

# -- Ingress configuration
ingress:
  enabled: false
  annotations: { }
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- PodSecurityContext
podSecurityContext: { }

# -- JobSecurityContext
jobSecurityContext:
  runAsUser: 1001
  runAsGroup: 0
  runAsNonRoot: true

# -- Preconfigured SecurityContext
securityContext:
  runAsUser: 1001
  runAsGroup: 0
  runAsNonRoot: true

# -- Resource boundaries
resources:
  requests:
    cpu: 250m
    memory: 500Mi
  limits:
    cpu: 2
    memory: 1Gi

# -- NodeSelector configuration
nodeSelector:
  "kubernetes.io/os": linux

# -- Tolerations configuration
tolerations: [ ]

# -- Affinity configuration
affinity: { }

# -- PodAnnotation configuration
podAnnotations: { }

# -- Keycloak configuration
keycloak:
  # -- Enable to deploy Keycloak
  enabled: true
  # -- Job configuration
  jobs:
    # -- Enable to create keycloak database if not exists
    createDatabaseIfNotExists: true
  # -- Keycloak postgresql database configuration
  postgresql:
    # -- Enable to deploy Keycloak postgresql database
    enabled: false
  # -- Existing database configuration
  externalDatabase:
    # -- Database host. Default: <release name>-postgresql
    host: "{{ .Release.Name }}-postgresql"
    # -- Database port
    port: 5432
    # -- Database user
    user: "miw"
    # -- Database name
    database: "miw_keycloak"
    # -- Existing secret name for the database password. Default: <release name>-postgresql
    existingSecret: "{{ .Release.Name }}-postgresql"
    # -- Existing secret key for the database password
    existingSecretPasswordKey: "password"
  # -- Keycloak authentication
  auth:
    # -- Keycloak admin user
    adminUser: ""
    # -- Keycloak admin password
    adminPassword: ""
  # -- Playground Keycloak realm configuration for the MIW
  keycloakConfigCli:
    # -- Enable to create the miw playground realm
    enabled: true
    # -- Existing configmap name for the realm configuration
    existingConfigmap: keycloak-realm-config
    # -- Number of retries before considering a Job as failed
    backoffLimit: 5
  # -- Environment Variables for the Keycloak container
  extraEnvVars:
    # -- Keycloak hostname. Default: <release name>-keycloak:4200
    - name: KEYCLOAK_HOSTNAME
      value: "{{ .Release.Name }}-keycloak:4200"

# -- Postgresql configuration
postgresql:
  # -- Enable to deploy Postgresql
  enabled: true
  # -- Postgresql authentication
  auth:
    # -- Enable postgresql admin user
    enablePostgresUser: false
    # -- User to create
    username: "miw"
  # -- Backup configuration (see https://github.com/bitnami/charts/tree/main/bitnami/postgresql#backup-parameters)
  backup:
    # -- Enable to create a backup cronjob
    enabled: false
    # -- Cronjob configuration
    conjob:
      # -- Backup schedule
      schedule: "* */6 * * *"
      # -- Cronjob security context
      containerSecurityContext:
        # -- user id
        runAsUser: 1001
        # -- group id
        runAsGroup: 0
        # -- enable to run as non root
        runAsNonRoot: true
      # -- Cronjob storage configuration
      storage:
        # -- Name of an existing PVC to use
        existingClaim: ""
        # -- Setting it to "keep" to avoid removing PVCs during a helm delete operation. Leaving it empty will delete PVCs after the chart deleted
        resourcePolicy: "keep"
        # -- PVC Storage Request for the backup data volume
        size: "8Gi"