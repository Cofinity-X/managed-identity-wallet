@file:UseSerializers(AnySerializer::class)

package net.catenax.core.custodian.models.ssi

import com.apicatalog.jsonld.loader.DocumentLoaderOptions
import com.danubetech.verifiablecredentials.CredentialSubject
import com.danubetech.verifiablecredentials.VerifiableCredential
import com.danubetech.verifiablecredentials.credentialstatus.CredentialStatus
import com.danubetech.verifiablecredentials.validation.Validation
import com.fasterxml.jackson.annotation.JsonProperty
import foundation.identity.jsonld.ConfigurableDocumentLoader
import foundation.identity.jsonld.JsonLDUtils
import info.weboftrust.ldsignatures.LdProof
import io.bkbn.kompendium.annotations.Field
import io.bkbn.kompendium.annotations.Param
import io.bkbn.kompendium.annotations.ParamType
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.UseSerializers
import kotlinx.serialization.json.*
import net.catenax.core.custodian.plugins.AnySerializer

import java.net.URI

@Serializable
data class VerifiableCredentialDto(
    @Field(description = "The ID of credential as String (URI compatible)", name = "id")
    val id: String? = null,
    @JsonProperty("@context")
    @SerialName("@context")
    @Field(description = "List of Contexts", name = "@context")
    val context: List<String>,
    @Field(description = "List of Types", name = "type")
    val type: List<String>,
    @Field(description = "The DID of Issuer as String (URI compatible)", name = "issuer")
    val issuer: String,
    @Field(description = "The Issuance Date as String in Rfc3339 format", name = "issuanceDate")
    var issuanceDate: String, // In Rfc3339
    @Field(description = "The Expiration Date as String in Rfc3339 format", name = "expirationDate")
    val expirationDate: String? = null, // In Rfc3339
    @Field(description = "The Credential Subject including the DID of the Subject", name = "credentialSubject")
    val credentialSubject: Map<String, Any>,
    @Field(description = "The Proof generated by the Issuer for issued Credentials", name = "proof")
    val proof: LdProofDto? = null
) {
    constructor(
        id: String,
        context: List<String>,
        type: List<String>,
        issuer: String,
        issuanceDate: String,
        expirationDate: String,
        credentialSubject: Map<String, Any>
    ) : this(id, context, type, issuer, issuanceDate, expirationDate, credentialSubject, null) { }

    init {
        // TBD validation example
        // validateContextAndSyntax(toVerifiableCredential())
    }

    fun toVerifiableCredential(): VerifiableCredential {
        // impl. related
        val credentialSubject = CredentialSubject.builder()
            .id(URI.create(this.id))
            .claims(this.credentialSubject)
            .build()
        val verifiableCredential = VerifiableCredential.builder();
        this.context.forEach { verifiableCredential.context(URI.create(it)) }
        this.type.forEach { verifiableCredential.type(it) }
        verifiableCredential.id(URI.create(this.id))
        verifiableCredential.issuer(URI.create(this.issuer))
        verifiableCredential.issuanceDate(JsonLDUtils.stringToDate(this.issuanceDate))
        verifiableCredential.expirationDate(JsonLDUtils.stringToDate(this.expirationDate))
        verifiableCredential.credentialSubject(credentialSubject)
        if (this.proof != null) {
            val ldProof = LdProof.builder()
                .type(this.proof.type)
                .proofPurpose(this.proof.proofPurpose)
                .created(JsonLDUtils.stringToDate(this.proof.created))
                .verificationMethod(URI.create(this.proof.verificationMethod))
                .jws(this.proof.jws).build()
            verifiableCredential.ldProof(ldProof)
        }
        return verifiableCredential.build();
    }

    fun validateContextAndSyntax(verifiableCredential: VerifiableCredential) {
        var documentLoader = ConfigurableDocumentLoader()
        documentLoader.httpLoader = ConfigurableDocumentLoader.getDefaultHttpLoader()
        documentLoader.isEnableHttps = true
        documentLoader.isEnableLocalCache = true
        verifiableCredential.contexts.forEach {
            documentLoader.loadDocument(it, DocumentLoaderOptions())
        }
        verifiableCredential.documentLoader = documentLoader;
        Validation.validate(verifiableCredential)
    };
}

@Serializable
data class VerifiableCredentialParameters(
    @Param(type = ParamType.QUERY)
    @Field(description = "The ID of the Credential as String (URI compatible)", name = "id")
    val id: String,
    @Param(type = ParamType.QUERY)
    @Field(description = "The list of Types", name = "type")
    val type: List<String>,
    @Param(type = ParamType.QUERY)
    @Field(description = "The DID or BPN of Issuer as String", name = "issuerIdentifier")
    val issuerIdentifier: String,
    @Param(type = ParamType.QUERY)
    @Field(description = "The DID or BPN of holder as String", name = "holderIdentifier")
    val holderIdentifier: String
)

@Serializable
data class IssuedVerifiableCredentialRequestDto(
    @Field(description = "The ID of credential as String (URI compatible)", name = "id")
    val id: String? = null,
    @JsonProperty("@context")
    @SerialName("@context")
    @Field(description = "List of Contexts", name = "@context")
    val context: List<String>,
    @Field(description = "List of Types", name = "type")
    val type: List<String>,
    @Field(description = "The DID of Issuer", name = "issuer")
    val issuer: String,
    @Field(description = "The Issuance Date as String in Rfc3339 format", name = "issuanceDate")
    var issuanceDate: String, // In Rfc3339
    @Field(description = "The Expiration Date as String in Rfc3339 format", name = "expirationDate")
    val expirationDate: String? = null, // In Rfc3339
    @Field(description = "The Credential Subject including the DID of the Subject", name = "credentialSubject")
    val credentialSubject: Map<String, Any>,
    @Field(description = "The Proof generated by the Issuer", name = "proof")
    val proof: LdProofDto
)

@Serializable
data class VerifiableCredentialRequestDto(
    @Field(description = "The ID of credential as String (URI compatible)", name = "id")
    val id: String? = null,
    @JsonProperty("@context")
    @SerialName("@context")
    @Field(description = "List of Contexts", name = "@context")
    val context: List<String>,
    @Field(description = "List of Types", name = "type")
    val type: List<String>,
    @Field(description = "The DID or BPN of Issuer", name = "issuerIdentifier")
    val issuerIdentifier: String,
    @Field(description = "The Issuance Date as String in Rfc3339 format", name = "issuanceDate")
    var issuanceDate: String, // In Rfc3339
    @Field(description = "The Expiration Date as String in Rfc3339 format", name = "expirationDate")
    val expirationDate: String? = null, // In Rfc3339
    @Field(description = "The Credential Subject including the DID of the Subject", name = "credentialSubject")
    val credentialSubject: Map<String, Any>
)
